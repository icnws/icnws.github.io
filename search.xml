<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用阿里云RAM的子账号管理MQ服务]]></title>
    <url>%2F2017%2F152-using-aliyun-mq%2F</url>
    <content type="text"><![CDATA[登录Aliyun主账号，进入访问控制页面，点击【用户管理】，选择右上角的【新建用户】 创建完成后【管理】用户，找到用户AccessKey那一列，选择创建AccessKey并将相关参数保存，结果如下：这个参数在后面访问MQ服务的时候会用到。 授权用户使用mq的权限，如下图： 开启中间件消息队列服务(MQ),创建Topic并申请发布，申请订阅，定义好对应的标识。基本流程如下： 接下来就是按照对应Producer、Consumer集成方式和接入点进行接入，完成基本配置了。如果所有的你都做了，最后一步授权忘了做，这很可能无法接入，会报错。12345Exception in thread &quot;main&quot; com.aliyun.openservices.ons.api.exception.ONSClientException: Receive a broker exception, Topi=kaoshi, msgId=null, com.aliyun.openservices.ons.api.impl.authority.exception.AuthenticationException: valid resource owner failed. maybe the resource kaoshi not created, com.alibaba.ons.open.auth.validator.PermissionValidator.check(PermissionValidator.java:66)See http://docs.aliyun.com/cn#/pub/ons/faq/exceptions&amp;broker_response_exception for further details. at com.aliyun.openservices.ons.api.impl.rocketmq.ProducerImpl.checkProducerException(ProducerImpl.java:198) at com.aliyun.openservices.ons.api.impl.rocketmq.ProducerImpl.send(ProducerImpl.java:107) at com.ksxing.tmp.MqTest.main(MqTest.java:38) 话说回来，要想相对安全的使用阿里云，真的要好好研究一下这个RAM授权机制，所以有时间还得巴拉巴拉文章！https://ram.console.aliyun.com 简单记录，有待深入挖坑！欢迎留言交流！]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Aliyun-RAM</tag>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot Actuator显示更多信息]]></title>
    <url>%2F2017%2F151-spring-boot-actuator-more-info%2F</url>
    <content type="text"><![CDATA[通过http://localhost:8100/health 访问监控信息发现只有有限的信息，如下： 1234&#123; &quot;description&quot;: &quot;Spring Cloud Eureka Discovery Client&quot;, &quot;status&quot;: &quot;UP&quot;&#125; 只展示了注册中心Eureka的信息。 经过阅读文档发现，新版本当中，actuator增加了安全机制，需要在配置文件中添加参数： 123management: security: enabled: false 默认为true，需要校验权限才能访问/env、/mappings、 /beans，这里关闭后重新启动就可以看到很多health 的信息了。更多配置需要参考：https://docs.spring.io/spring-boot/docs/1.5.7.RELEASE/reference/htmlsingle/#production-ready 访问http://localhost:8100/health 获得如下数据： 123456789101112131415161718192021222324252627282930313233343536&#123; &quot;description&quot;: &quot;Spring Cloud Eureka Discovery Client&quot;, &quot;status&quot;: &quot;UP&quot;, &quot;discoveryComposite&quot;: &#123; &quot;description&quot;: &quot;Spring Cloud Eureka Discovery Client&quot;, &quot;status&quot;: &quot;UP&quot;, &quot;discoveryClient&quot;: &#123; &quot;description&quot;: &quot;Spring Cloud Eureka Discovery Client&quot;, &quot;status&quot;: &quot;UP&quot;, &quot;services&quot;: [ &quot;itmuch-customer-movie&quot;, &quot;itmuch-provider-user&quot; ] &#125;, &quot;eureka&quot;: &#123; &quot;description&quot;: &quot;Remote status from Eureka server&quot;, &quot;status&quot;: &quot;UP&quot;, &quot;applications&quot;: &#123; &quot;ITMUCH-CUSTOMER-MOVIE&quot;: 1, &quot;ITMUCH-PROVIDER-USER&quot;: 1 &#125; &#125; &#125;, &quot;diskSpace&quot;: &#123; &quot;status&quot;: &quot;UP&quot;, &quot;total&quot;: 164282499072, &quot;free&quot;: 151694168064, &quot;threshold&quot;: 10485760 &#125;, &quot;refreshScope&quot;: &#123; &quot;status&quot;: &quot;UP&quot; &#125;, &quot;hystrix&quot;: &#123; &quot;status&quot;: &quot;UP&quot; &#125;&#125; 更多参数设置参考：https://segmentfault.com/a/1190000004318360?_ea=568366 简单记录，有待深入挖坑！欢迎留言交流！]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Actuator</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建一个Eureka的集群]]></title>
    <url>%2F2017%2F150-simple-eureka-ha%2F</url>
    <content type="text"><![CDATA[根据周立的Spring Cloud &amp; Docker那本书学习Eureka集群搭建，含实例代码 版本如下： Spring Boot 1.5.6.RELEASE Spring Cloud Camden.SR7 JDK 1.8 配置Eureka Server配置pom.xml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.sss&lt;/groupId&gt; &lt;artifactId&gt;itmuch-discovery-eureka&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;itmuch-discovery-eureka&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.6.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Camden.SR7&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!--Eureka注册中心--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 配置application.yml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748spring: application: name: itmuch-discovery-eureka profiles: active: peer1 #创建3个项目分别peer2,peer3---server: port: 8762eureka: client: service-url: defaultZone: http://peer1:8761/eureka/,http://peer3:8763/eureka/ instance: hostname: peer2 server: enable-self-preservation: falsespring: profiles: peer2---server: port: 8761eureka: client: service-url: defaultZone: http://peer2:8762/eureka/,http://peer3:8763/eureka/ instance: hostname: peer1 server: enable-self-preservation: falsespring: profiles: peer1---server: port: 8763eureka: client: service-url: defaultZone: http://peer1:8761/eureka/,http://peer2:8762/eureka/ instance: hostname: peer3 server: enable-self-preservation: falsespring: profiles: peer3 注意这里： 12server: enable-self-preservation: false 增加这个参数后的Eureka Server将关闭自我保护机制，这个机制在线上一般不是这样极端的关闭，而是通过调整阀值，这里为了测试服务是否能正常注销故意关闭的。如果不关闭，Eureka虽然发现服务down掉了，但是因为服务是单点的，所以会保留实例的注册记录在表内，参考我在http:///Spring4all.com 提的问题：http://spring4all.com/question/446 修改HOST增加： 1127.0.0.1 peer1 peer2 peer3 调整Application.java123456789101112import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;@SpringBootApplication@EnableEurekaServerpublic class ItmuchDiscoveryEurekaApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(ItmuchDiscoveryEurekaApplication.class, args); &#125;&#125; 配置完成上边这些，项目名称分别是itmuch-discovery-eureka，itmuch-discovery-eureka-ha，itmuch-discovery-eureka-ha2，然后在IDE里启动即可 创建服务并注册创建Provider User服务参考项目itmuch-provider-user项目， 配置pom.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.sss&lt;/groupId&gt; &lt;artifactId&gt;itmuch-provider-user&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;itmuch-provider-user&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.6.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 健康检查 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 注册服务 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.h2database&lt;/groupId&gt; &lt;artifactId&gt;h2&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Camden.SR7&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 配置Application.java123456789101112import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;@EnableDiscoveryClient@SpringBootApplicationpublic class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125;&#125; 配置application.yml12345678910111213141516171819202122232425262728293031323334353637server: port: 8000spring: application: name: itmuch-provider-user jpa: generate-ddl: false show-sql: true hibernate: ddl-auto: none datasource: # 指定数据源 platform: h2 # 指定数据源类型 schema: classpath:schema.sql # 指定h2数据库的建表脚本 data: classpath:data.sql # 指定h2数据库的数据脚本logging: # 配置日志级别，让hibernate打印出执行的SQL level: root: INFO org.hibernate: INFO org.hibernate.type.descriptor.sql.BasicBinder: TRACE org.hibernate.type.descriptor.sql.BasicExtractor: TRACE#监控的信息配置 http://&#123;host&#125;:&#123;port&#125;/infoinfo: app: name: @project.artifactId@ encoding: @project.build.sourceEncoding@ java: source: @java.version@ target: @java.version@#注册服务eureka: client: service-url: defaultZone: http://peer1:8761/eureka/,http://peer2:8762/eureka/,http://peer3:8763/eureka/ instance: prefer-ip-address: true 创建配置完成后启动服务，刷新Eureka的页面即可看到对应服务已经存在。 创建Customer Movie服务该服务调用Provider User服务,参考项目itmuch-customer-movie. 配置pom.xml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.sss&lt;/groupId&gt; &lt;artifactId&gt;itmuch-consumer-movie&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;itmuch-consumer-movie&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.6.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring.cloud.version&gt;Camden.SR7&lt;/spring.cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 配置Application.java12345678910111213141516171819import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;import org.springframework.context.annotation.Bean;import org.springframework.web.client.RestTemplate;@EnableDiscoveryClient@SpringBootApplicationpublic class Application &#123; @Bean public RestTemplate restTemplate()&#123; return new RestTemplate(); &#125; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125;&#125; 配置application.yml1234567891011121314151617181920212223242526272829server: port: 8100spring: application: name: itmuch-customer-movielogging: # 配置日志级别，让hibernate打印出执行的SQL level: root: INFO org.hibernate: INFO org.hibernate.type.descriptor.sql.BasicBinder: TRACE org.hibernate.type.descriptor.sql.BasicExtractor: TRACE#监控的信息配置 http://&#123;host&#125;:&#123;port&#125;/infoinfo: app: name: @project.artifactId@ encoding: @project.build.sourceEncoding@ java: source: @java.version@ target: @java.version@#注册服务eureka: client: service-url: defaultZone: http://peer1:8761/eureka/,http://peer2:8762/eureka/,http://peer3:8763/eureka/ instance: prefer-ip-address: true 创建配置完成后启动服务，刷新Eureka的页面即可看到对应服务已经存在。 至此：一个简单的Eureka服务已经搭建完成了，下面附送源码，可以直接在github上下载下来运行。 附件传送门：https://github.com/icnws/eureka-simple-ha-demo 简单记录，有待深入挖坑！欢迎留言交流！]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Centos7中安装Nodejs服务]]></title>
    <url>%2F2017%2F149-nodejs-in-centos7%2F</url>
    <content type="text"><![CDATA[博客迁移到github之后，阿里云服务器闲置了，现在折腾一下，把博客同步到阿里云服务器 集成工具安装由于是新的系统，需要执行安装一些常用的软件： yum -y install gcc make gcc-c++ openssl-devel wget 安装Nodejs执行如下命令： 1yum install nodejs 遇到问题： 123456Error: Package: 1:nodejs-6.11.1-1.el7.x86_64 (epel) Requires: libhttp_parser.so.2()(64bit)Error: Package: 1:nodejs-6.11.1-1.el7.x86_64 (epel) Requires: http-parser &gt;= 2.7.0 You could try using --skip-broken to work around the problem You could try running: rpm -Va --nofiles --nodigest 解决办法参考：https://github.com/Icinga/icinga-vagrant/issues/87 1yum -y install https://opensource.enda.eu/packages/http-parser-2.7.1-3.el7.x86_64.rpm 再次执行yum install nodejs可以正常运行，安装完成，检查node版本 1234[root@xx xx]# node -vv6.11.1[root@xx xx]# npm -v3.10.10 至此，安装完成，可以正常使用了！ 简单记录，有待深入挖坑！欢迎留言交流！]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在docker中安装Mariadb]]></title>
    <url>%2F2017%2F148-mariadb-in-docker%2F</url>
    <content type="text"><![CDATA[简单使用Docker下安装Mariadb服务，基于Boot2Docker在windows下实现 Boot2Docker的安装参考上一篇在docker中安装redis 的前半部分 下载Mariadb镜像用docker pull mariadb下载最新的mariadb镜像 下载镜像会慢一些，需要等待，完成之后，通过docker images命令就可以看到了。 123REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZEredis latest b77605993f64 6 weeks ago 105.9 MBmariadb latest b77605991234 9 weeks ago 375.9 MB 启动服务运行容器1docker run --name test-mariadb -e MYSQL_ROOT_PASSWORD=123456 -d mariadb docker命令 run 用–name指定容器的别名，mariadb是指容器的名称MYSQL_ROOT_PASSWORD指定ROOT用户的密码 端口映射1：docker 和虚拟机映射 将虚拟机的3306端口和docker的3306端口映射，port-mariadb是名称 1docker run -d -p 3306:3306 --name port-mariadb -e MYSQL_ROOT_PASSWORD=123456 -d mariadb 端口映射2：虚拟机和本机映射 打开VirtualBox找到boot2docker的虚拟机，打开设置、网络，找到【端口转发】，添加一条规则，宿主机3305和虚拟机的3306映射，如下 启动服务：这里需要启动两个服务，一个是mariadb本身的服务——test-mariadb，一个是docker和虚拟机映射服务——port-mariadb,启动方式如下123docker start test-mariadbdocker start port-mariadb 通过docker ps -a可以看到服务已经运行了1234$ docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES3190d98286d0 mariadb &quot;docker-entrypoint.sh&quot; 22 minutes ago Up 22 minutes 0.0.0.0:3306-&gt;3306/tcp port-mariadbce4e5c5cee70 mariadb &quot;docker-entrypoint.sh&quot; 43 minutes ago Up 26 minutes 3306/tcp test-mariadb 至此，就可以通过宿主机本地的Sql客户端工具，配置127.0.0.1的3305端口进行访问了。参考：https://mariadb.com/kb/en/the-mariadb-library/installing-and-using-mariadb-via-docker/ 另外附上自己写的docker下启动服务的脚本，每次启动docker后手动启动多麻烦123456# start servicesdocker start test-redisdocker start port-redisdocker start test-mariadbdocker start port-mariadb#end start 简单记录，有待深入挖坑！欢迎留言交流！]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Mariadb</tag>
      </tags>
  </entry>
</search>
