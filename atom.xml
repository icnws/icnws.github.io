<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>简成的博客</title>
  
  <subtitle>城南往事</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.icnws.com/"/>
  <updated>2018-10-24T02:28:39.409Z</updated>
  <id>http://www.icnws.com/</id>
  
  <author>
    <name>简成</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一图分析小程序-人民社区lite</title>
    <link href="http://www.icnws.com/2018/2018%E4%B8%80%E5%9B%BE%E5%88%86%E6%9E%90%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E4%BA%BA%E6%B0%91%E7%A4%BE%E5%8C%BAlite/"/>
    <id>http://www.icnws.com/2018/2018一图分析小程序-人民社区lite/</id>
    <published>2018-10-24T02:19:05.000Z</published>
    <updated>2018-10-24T02:28:39.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>对小程序-人民社区lite的前后端进行了简单的分析<br><a id="more"></a></p><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="/uploads/2018/人民社区.jpg" alt="人民社区"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;对小程序-人民社区lite的前后端进行了简单的分析&lt;br&gt;
    
    </summary>
    
      <category term="产品" scheme="http://www.icnws.com/categories/%E4%BA%A7%E5%93%81/"/>
    
    
      <category term="Wechat" scheme="http://www.icnws.com/tags/Wechat/"/>
    
      <category term="MiniProgram" scheme="http://www.icnws.com/tags/MiniProgram/"/>
    
  </entry>
  
  <entry>
    <title>使用npm小技巧</title>
    <link href="http://www.icnws.com/2018/2018%E4%BD%BF%E7%94%A8npm%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://www.icnws.com/2018/2018使用npm小技巧/</id>
    <published>2018-10-23T23:19:05.000Z</published>
    <updated>2018-10-24T08:19:18.872Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>使用npm经常会遇到加载某个依赖加载不了，所以需要用国内的淘宝镜像</p><p>然而，将npm改成cnpm是极不习惯的，所以看到nrm就赶紧记下来了，极是好用！</p><h3 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h3><h4 id="安装nrm"><a href="#安装nrm" class="headerlink" title="安装nrm"></a>安装nrm</h4><p><code>npm install nrm -g --registry=https://registry.npm.taobao.org</code></p><h4 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h4><p><code>nrm ls</code></p><p>结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* npm ---- https://registry.npmjs.org/</span><br><span class="line">  cnpm --- http://r.cnpmjs.org/</span><br><span class="line">  taobao - https://registry.npm.taobao.org/</span><br><span class="line">  nj ----- https://registry.nodejitsu.com/</span><br><span class="line">  rednpm - http://registry.mirror.cqupt.edu.cn/</span><br><span class="line">  npmMirror  https://skimdb.npmjs.com/registry/</span><br><span class="line">  edunpm - http://registry.enpmjs.org/</span><br></pre></td></tr></table></figure></p><h3 id="使用镜像"><a href="#使用镜像" class="headerlink" title="使用镜像"></a>使用镜像</h3><p><code>nrm use taobao</code></p><p>通过命令<code>nrm ls</code>可以看到，镜像已经是taobao了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  npm ---- https://registry.npmjs.org/</span><br><span class="line">  cnpm --- http://r.cnpmjs.org/</span><br><span class="line">* taobao - https://registry.npm.taobao.org/</span><br><span class="line">  nj ----- https://registry.nodejitsu.com/</span><br><span class="line">  rednpm - http://registry.mirror.cqupt.edu.cn/</span><br><span class="line">  npmMirror  https://skimdb.npmjs.com/registry/</span><br><span class="line">  edunpm - http://registry.enpmjs.org/</span><br></pre></td></tr></table></figure></p><p>接下来就可以正常用npm安装依赖了，都很方便。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;使用npm经常会遇到加载某个依赖加载不了，所以需要用国内的淘宝镜像&lt;/p&gt;
&lt;p&gt;然而，将npm改成cnpm是极不习惯的，所以看到nrm就赶
      
    
    </summary>
    
      <category term="技术" scheme="http://www.icnws.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="NPM" scheme="http://www.icnws.com/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>使用阿里云RAM的子账号管理MQ服务</title>
    <link href="http://www.icnws.com/2017/152-using-aliyun-mq/"/>
    <id>http://www.icnws.com/2017/152-using-aliyun-mq/</id>
    <published>2017-12-27T11:31:30.000Z</published>
    <updated>2018-03-15T06:27:28.452Z</updated>
    
    <content type="html"><![CDATA[<p>登录Aliyun主账号，进入访问控制页面，点击【用户管理】，选择右上角的【新建用户】</p><p><img src="/uploads/2017/create_1_user.png" alt=""></p><p>创建完成后【管理】用户，找到用户AccessKey那一列，选择创建AccessKey并将相关参数保存，结果如下：<br>这个参数在后面访问MQ服务的时候会用到。</p><p><img src="/uploads/2017/create_access_key.png" alt=""></p><p>授权用户使用mq的权限，如下图：</p><p><img src="/uploads/2017/grant_mq_privilage.png" alt=""></p><p>开启中间件消息队列服务(MQ),创建Topic并申请发布，申请订阅，定义好对应的标识。基本流程如下：</p><p><img src="/uploads/2017/mq_create_new_topic.png" alt=""><br><img src="/uploads/2017/mq_apply_for_producer.png" alt=""><br><img src="/uploads/2017/mq_apply_for_consumer.png" alt=""><br><img src="/uploads/2017/mq_grant_for_sub_account.png" alt=""></p><p>接下来就是按照对应Producer、Consumer集成方式和接入点进行接入，完成基本配置了。<br>如果所有的你都做了，最后一步授权忘了做，这很可能无法接入，会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; com.aliyun.openservices.ons.api.exception.ONSClientException: Receive a broker exception, Topi=kaoshi, msgId=null, com.aliyun.openservices.ons.api.impl.authority.exception.AuthenticationException: valid resource owner failed. maybe the resource kaoshi not created, com.alibaba.ons.open.auth.validator.PermissionValidator.check(PermissionValidator.java:66)</span><br><span class="line">See http://docs.aliyun.com/cn#/pub/ons/faq/exceptions&amp;broker_response_exception for further details.</span><br><span class="line">at com.aliyun.openservices.ons.api.impl.rocketmq.ProducerImpl.checkProducerException(ProducerImpl.java:198)</span><br><span class="line">at com.aliyun.openservices.ons.api.impl.rocketmq.ProducerImpl.send(ProducerImpl.java:107)</span><br><span class="line">at com.ksxing.tmp.MqTest.main(MqTest.java:38)</span><br></pre></td></tr></table></figure></p><p>话说回来，要想相对安全的使用阿里云，真的要好好研究一下这个RAM授权机制，所以有时间还得巴拉巴拉文章！<br><a href="https://ram.console.aliyun.com" target="_blank" rel="noopener">https://ram.console.aliyun.com</a></p><hr><p>简单记录，有待深入挖坑！欢迎留言交流！</p>]]></content>
    
    <summary type="html">
    
      简单使用RAM子账号
    
    </summary>
    
      <category term="技术" scheme="http://www.icnws.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Aliyun-RAM" scheme="http://www.icnws.com/tags/Aliyun-RAM/"/>
    
      <category term="MQ" scheme="http://www.icnws.com/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Actuator显示更多信息</title>
    <link href="http://www.icnws.com/2017/151-spring-boot-actuator-more-info/"/>
    <id>http://www.icnws.com/2017/151-spring-boot-actuator-more-info/</id>
    <published>2017-09-15T11:31:30.000Z</published>
    <updated>2018-03-15T06:27:28.451Z</updated>
    
    <content type="html"><![CDATA[<p>通过<a href="http://localhost:8100/health" target="_blank" rel="noopener">http://localhost:8100/health</a> 访问监控信息发现只有有限的信息，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;description&quot;: &quot;Spring Cloud Eureka Discovery Client&quot;,</span><br><span class="line">  &quot;status&quot;: &quot;UP&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只展示了注册中心Eureka的信息。</p><p>经过阅读文档发现，新版本当中，actuator增加了安全机制，需要在配置文件中添加参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">management:</span><br><span class="line">  security:</span><br><span class="line">    enabled: false</span><br></pre></td></tr></table></figure><p>默认为true，需要校验权限才能访问/env、/mappings、 /beans，这里关闭后重新启动就可以看到很多health 的信息了。更多配置需要参考：<a href="https://docs.spring.io/spring-boot/docs/1.5.7.RELEASE/reference/htmlsingle/#production-ready" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/1.5.7.RELEASE/reference/htmlsingle/#production-ready</a></p><p>访问<a href="http://localhost:8100/health" target="_blank" rel="noopener">http://localhost:8100/health</a> 获得如下数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;description&quot;: &quot;Spring Cloud Eureka Discovery Client&quot;,</span><br><span class="line">    &quot;status&quot;: &quot;UP&quot;,</span><br><span class="line">    &quot;discoveryComposite&quot;: &#123;</span><br><span class="line">        &quot;description&quot;: &quot;Spring Cloud Eureka Discovery Client&quot;,</span><br><span class="line">        &quot;status&quot;: &quot;UP&quot;,</span><br><span class="line">        &quot;discoveryClient&quot;: &#123;</span><br><span class="line">            &quot;description&quot;: &quot;Spring Cloud Eureka Discovery Client&quot;,</span><br><span class="line">            &quot;status&quot;: &quot;UP&quot;,</span><br><span class="line">            &quot;services&quot;: [</span><br><span class="line">                &quot;itmuch-customer-movie&quot;,</span><br><span class="line">                &quot;itmuch-provider-user&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;eureka&quot;: &#123;</span><br><span class="line">            &quot;description&quot;: &quot;Remote status from Eureka server&quot;,</span><br><span class="line">            &quot;status&quot;: &quot;UP&quot;,</span><br><span class="line">            &quot;applications&quot;: &#123;</span><br><span class="line">                &quot;ITMUCH-CUSTOMER-MOVIE&quot;: 1,</span><br><span class="line">                &quot;ITMUCH-PROVIDER-USER&quot;: 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;diskSpace&quot;: &#123;</span><br><span class="line">        &quot;status&quot;: &quot;UP&quot;,</span><br><span class="line">        &quot;total&quot;: 164282499072,</span><br><span class="line">        &quot;free&quot;: 151694168064,</span><br><span class="line">        &quot;threshold&quot;: 10485760</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;refreshScope&quot;: &#123;</span><br><span class="line">        &quot;status&quot;: &quot;UP&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hystrix&quot;: &#123;</span><br><span class="line">        &quot;status&quot;: &quot;UP&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多参数设置参考：<a href="https://segmentfault.com/a/1190000004318360?_ea=568366" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004318360?_ea=568366</a></p><hr><p>简单记录，有待深入挖坑！欢迎留言交流！</p>]]></content>
    
    <summary type="html">
    
      在学习监控的时候，发现/health并不能显示很多信息，阅读一下文档解决。https://docs.spring.io/spring-boot/docs/1.5.7.RELEASE/reference/htmlsingle/#production-ready
    
    </summary>
    
      <category term="技术" scheme="http://www.icnws.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring Boot" scheme="http://www.icnws.com/tags/Spring-Boot/"/>
    
      <category term="Actuator" scheme="http://www.icnws.com/tags/Actuator/"/>
    
  </entry>
  
  <entry>
    <title>搭建一个Eureka的集群</title>
    <link href="http://www.icnws.com/2017/150-simple-eureka-ha/"/>
    <id>http://www.icnws.com/2017/150-simple-eureka-ha/</id>
    <published>2017-09-13T11:31:30.000Z</published>
    <updated>2018-03-15T06:27:28.451Z</updated>
    
    <content type="html"><![CDATA[<p>根据周立的Spring Cloud &amp; Docker那本书学习Eureka集群搭建，含实例代码</p><p>版本如下：</p><p>Spring Boot 1.5.6.RELEASE</p><p>Spring Cloud Camden.SR7</p><p>JDK    1.8</p><h2 id="配置Eureka-Server"><a href="#配置Eureka-Server" class="headerlink" title="配置Eureka Server"></a>配置Eureka Server</h2><h3 id="配置pom-xml"><a href="#配置pom-xml" class="headerlink" title="配置pom.xml"></a>配置pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;groupId&gt;com.sss&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;itmuch-discovery-eureka&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line">&lt;name&gt;itmuch-discovery-eureka&lt;/name&gt;</span><br><span class="line">&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;spring-cloud.version&gt;Camden.SR7&lt;/spring-cloud.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;!--Eureka注册中心--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: itmuch-discovery-eureka</span><br><span class="line">  profiles:</span><br><span class="line">    active: peer1 #创建3个项目分别peer2,peer3</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">server:</span><br><span class="line">  port: 8762</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://peer1:8761/eureka/,http://peer3:8763/eureka/</span><br><span class="line">  instance:</span><br><span class="line">    hostname: peer2</span><br><span class="line">  server:</span><br><span class="line">    enable-self-preservation: false</span><br><span class="line">spring:</span><br><span class="line">  profiles: peer2</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://peer2:8762/eureka/,http://peer3:8763/eureka/</span><br><span class="line">  instance:</span><br><span class="line">    hostname: peer1</span><br><span class="line">  server:</span><br><span class="line">    enable-self-preservation: false</span><br><span class="line">spring:</span><br><span class="line">  profiles: peer1</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">server:</span><br><span class="line">  port: 8763</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://peer1:8761/eureka/,http://peer2:8762/eureka/</span><br><span class="line">  instance:</span><br><span class="line">    hostname: peer3</span><br><span class="line">  server:</span><br><span class="line">    enable-self-preservation: false</span><br><span class="line">spring:</span><br><span class="line">  profiles: peer3</span><br></pre></td></tr></table></figure><p>注意这里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  enable-self-preservation: false</span><br></pre></td></tr></table></figure><p>增加这个参数后的Eureka Server将关闭自我保护机制，这个机制在线上一般不是这样极端的关闭，而是通过调整阀值，这里为了测试服务是否能正常注销故意关闭的。如果不关闭，Eureka虽然发现服务down掉了，但是因为服务是单点的，所以会保留实例的注册记录在表内，参考我在http:///Spring4all.com 提的问题：<a href="http://spring4all.com/question/446" target="_blank" rel="noopener">http://spring4all.com/question/446</a></p><h3 id="修改HOST"><a href="#修改HOST" class="headerlink" title="修改HOST"></a>修改HOST</h3><p>增加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 peer1 peer2 peer3</span><br></pre></td></tr></table></figure><h3 id="调整Application-java"><a href="#调整Application-java" class="headerlink" title="调整Application.java"></a>调整Application.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">public class ItmuchDiscoveryEurekaApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(ItmuchDiscoveryEurekaApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成上边这些，项目名称分别是itmuch-discovery-eureka，itmuch-discovery-eureka-ha，itmuch-discovery-eureka-ha2，然后在IDE里启动即可</p><h2 id="创建服务并注册"><a href="#创建服务并注册" class="headerlink" title="创建服务并注册"></a>创建服务并注册</h2><h3 id="创建Provider-User服务"><a href="#创建Provider-User服务" class="headerlink" title="创建Provider User服务"></a>创建Provider User服务</h3><p>参考项目itmuch-provider-user项目，</p><h4 id="配置pom-xml-1"><a href="#配置pom-xml-1" class="headerlink" title="配置pom.xml"></a>配置pom.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;com.sss&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;itmuch-provider-user&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;itmuch-provider-user&lt;/name&gt;</span><br><span class="line">&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 健康检查 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 注册服务 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.h2database&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;h2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;Camden.SR7&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h4 id="配置Application-java"><a href="#配置Application-java" class="headerlink" title="配置Application.java"></a>配置Application.java</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置application-yml-1"><a href="#配置application-yml-1" class="headerlink" title="配置application.yml"></a>配置application.yml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8000</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: itmuch-provider-user</span><br><span class="line">  jpa:</span><br><span class="line">    generate-ddl: false</span><br><span class="line">    show-sql: true</span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: none</span><br><span class="line">  datasource:                           # 指定数据源</span><br><span class="line">    platform: h2                        # 指定数据源类型</span><br><span class="line">    schema: classpath:schema.sql        # 指定h2数据库的建表脚本</span><br><span class="line">    data: classpath:data.sql            # 指定h2数据库的数据脚本</span><br><span class="line">logging:                                # 配置日志级别，让hibernate打印出执行的SQL</span><br><span class="line">  level:</span><br><span class="line">    root: INFO</span><br><span class="line">    org.hibernate: INFO</span><br><span class="line">    org.hibernate.type.descriptor.sql.BasicBinder: TRACE</span><br><span class="line">    org.hibernate.type.descriptor.sql.BasicExtractor: TRACE</span><br><span class="line"></span><br><span class="line">#监控的信息配置 http://&#123;host&#125;:&#123;port&#125;/info</span><br><span class="line">info:</span><br><span class="line">  app:</span><br><span class="line">    name: @project.artifactId@</span><br><span class="line">    encoding: @project.build.sourceEncoding@</span><br><span class="line">    java:</span><br><span class="line">      source: @java.version@</span><br><span class="line">      target: @java.version@</span><br><span class="line"></span><br><span class="line">#注册服务</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://peer1:8761/eureka/,http://peer2:8762/eureka/,http://peer3:8763/eureka/</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true</span><br></pre></td></tr></table></figure><p>创建配置完成后启动服务，刷新Eureka的页面即可看到对应服务已经存在。</p><h3 id="创建Customer-Movie服务"><a href="#创建Customer-Movie服务" class="headerlink" title="创建Customer Movie服务"></a>创建Customer Movie服务</h3><p>该服务调用Provider User服务,参考项目itmuch-customer-movie.</p><h4 id="配置pom-xml-2"><a href="#配置pom-xml-2" class="headerlink" title="配置pom.xml"></a>配置pom.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;com.sss&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;itmuch-consumer-movie&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;itmuch-consumer-movie&lt;/name&gt;</span><br><span class="line">&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;spring.cloud.version&gt;Camden.SR7&lt;/spring.cloud.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring.cloud.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h4 id="配置Application-java-1"><a href="#配置Application-java-1" class="headerlink" title="配置Application.java"></a>配置Application.java</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public RestTemplate restTemplate()&#123;</span><br><span class="line">return new RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置application-yml-2"><a href="#配置application-yml-2" class="headerlink" title="配置application.yml"></a>配置application.yml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8100</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: itmuch-customer-movie</span><br><span class="line">logging:                                # 配置日志级别，让hibernate打印出执行的SQL</span><br><span class="line">  level:</span><br><span class="line">    root: INFO</span><br><span class="line">    org.hibernate: INFO</span><br><span class="line">    org.hibernate.type.descriptor.sql.BasicBinder: TRACE</span><br><span class="line">    org.hibernate.type.descriptor.sql.BasicExtractor: TRACE</span><br><span class="line"></span><br><span class="line">#监控的信息配置 http://&#123;host&#125;:&#123;port&#125;/info</span><br><span class="line">info:</span><br><span class="line">  app:</span><br><span class="line">    name: @project.artifactId@</span><br><span class="line">    encoding: @project.build.sourceEncoding@</span><br><span class="line">    java:</span><br><span class="line">      source: @java.version@</span><br><span class="line">      target: @java.version@</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#注册服务</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://peer1:8761/eureka/,http://peer2:8762/eureka/,http://peer3:8763/eureka/</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true</span><br></pre></td></tr></table></figure><p>创建配置完成后启动服务，刷新Eureka的页面即可看到对应服务已经存在。</p><p>至此：一个简单的Eureka服务已经搭建完成了，下面附送源码，可以直接在github上下载下来运行。</p><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>传送门：<a href="https://github.com/icnws/eureka-simple-ha-demo" target="_blank" rel="noopener">https://github.com/icnws/eureka-simple-ha-demo</a> </p><hr><p>简单记录，有待深入挖坑！欢迎留言交流！</p>]]></content>
    
    <summary type="html">
    
      根据周立的Spring Cloud &amp; Docker那本书学习Eureka集群搭建，含实例代码
    
    </summary>
    
      <category term="技术" scheme="http://www.icnws.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring Cloud" scheme="http://www.icnws.com/tags/Spring-Cloud/"/>
    
      <category term="Eureka" scheme="http://www.icnws.com/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>在Centos7中安装Nodejs服务</title>
    <link href="http://www.icnws.com/2017/149-nodejs-in-centos7/"/>
    <id>http://www.icnws.com/2017/149-nodejs-in-centos7/</id>
    <published>2017-09-07T11:31:30.000Z</published>
    <updated>2018-03-15T06:27:28.450Z</updated>
    
    <content type="html"><![CDATA[<p>博客迁移到github之后，阿里云服务器闲置了，现在折腾一下，把博客同步到阿里云服务器</p><h3 id="集成工具安装"><a href="#集成工具安装" class="headerlink" title="集成工具安装"></a>集成工具安装</h3><p>由于是新的系统，需要执行安装一些常用的软件：</p><p><code>yum -y install gcc make gcc-c++ openssl-devel wget</code></p><h3 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h3><p>执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nodejs</span><br></pre></td></tr></table></figure><p>遇到问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Error: Package: 1:nodejs-6.11.1-1.el7.x86_64 (epel)</span><br><span class="line">           Requires: libhttp_parser.so.2()(64bit)</span><br><span class="line">Error: Package: 1:nodejs-6.11.1-1.el7.x86_64 (epel)</span><br><span class="line">           Requires: http-parser &gt;= 2.7.0</span><br><span class="line"> You could try using --skip-broken to work around the problem</span><br><span class="line"> You could try running: rpm -Va --nofiles --nodigest</span><br></pre></td></tr></table></figure><p>解决办法参考：<a href="https://github.com/Icinga/icinga-vagrant/issues/87" target="_blank" rel="noopener">https://github.com/Icinga/icinga-vagrant/issues/87</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install https://opensource.enda.eu/packages/http-parser-2.7.1-3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>再次执行<code>yum install nodejs</code>可以正常运行，安装完成，检查node版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@xx xx]# node -v</span><br><span class="line">v6.11.1</span><br><span class="line">[root@xx xx]# npm -v</span><br><span class="line">3.10.10</span><br></pre></td></tr></table></figure><p>至此，安装完成，可以正常使用了！</p><hr><p>简单记录，有待深入挖坑！欢迎留言交流！</p>]]></content>
    
    <summary type="html">
    
      博客迁移到github之后，阿里云服务器闲置了，现在折腾一下，把博客同步到阿里云服务器
    
    </summary>
    
      <category term="技术" scheme="http://www.icnws.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Centos7" scheme="http://www.icnws.com/tags/Centos7/"/>
    
      <category term="Nodejs" scheme="http://www.icnws.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>在docker中安装Mariadb</title>
    <link href="http://www.icnws.com/2017/148-mariadb-in-docker/"/>
    <id>http://www.icnws.com/2017/148-mariadb-in-docker/</id>
    <published>2017-09-06T11:31:30.000Z</published>
    <updated>2018-03-15T06:27:28.450Z</updated>
    
    <content type="html"><![CDATA[<p>简单使用Docker下安装Mariadb服务，基于Boot2Docker在windows下实现</p><h3 id="Boot2Docker的安装"><a href="#Boot2Docker的安装" class="headerlink" title="Boot2Docker的安装"></a>Boot2Docker的安装</h3><p>参考上一篇<a href="http://www.icnws.com/2017/147-redis-in-docker/">在docker中安装redis</a> 的前半部分</p><h3 id="下载Mariadb镜像"><a href="#下载Mariadb镜像" class="headerlink" title="下载Mariadb镜像"></a>下载Mariadb镜像</h3><p>用<code>docker pull mariadb</code>下载最新的mariadb镜像</p><p>下载镜像会慢一些，需要等待，完成之后，通过<code>docker images</code>命令就可以看到了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">redis               latest              b77605993f64        6 weeks ago         105.9 MB</span><br><span class="line">mariadb             latest              b77605991234        9 weeks ago         375.9 MB</span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name test-mariadb -e MYSQL_ROOT_PASSWORD=123456 -d mariadb</span><br></pre></td></tr></table></figure><p>docker命令 run 用–name指定容器的别名，mariadb是指容器的名称<br>MYSQL_ROOT_PASSWORD指定ROOT用户的密码</p><h4 id="端口映射1："><a href="#端口映射1：" class="headerlink" title="端口映射1："></a>端口映射1：</h4><p>docker 和虚拟机映射</p><p>将虚拟机的3306端口和docker的3306端口映射，port-mariadb是名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --name port-mariadb -e MYSQL_ROOT_PASSWORD=123456 -d mariadb</span><br></pre></td></tr></table></figure><h4 id="端口映射2："><a href="#端口映射2：" class="headerlink" title="端口映射2："></a>端口映射2：</h4><p>虚拟机和本机映射</p><p>打开VirtualBox找到boot2docker的虚拟机，打开设置、网络，找到【端口转发】，添加一条规则，宿主机3305和虚拟机的3306映射，如下</p><p><img src="/uploads/2017/docker-vertual-port-bind.jpg" alt=""></p><h4 id="启动服务："><a href="#启动服务：" class="headerlink" title="启动服务："></a>启动服务：</h4><p>这里需要启动两个服务，一个是mariadb本身的服务——test-mariadb，一个是docker和虚拟机映射服务——port-mariadb,启动方式如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker start test-mariadb</span><br><span class="line"></span><br><span class="line">docker start port-mariadb</span><br></pre></td></tr></table></figure></p><p>通过<code>docker ps -a</code>可以看到服务已经运行了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">3190d98286d0        mariadb             &quot;docker-entrypoint.sh&quot;   22 minutes ago      Up 22 minutes       0.0.0.0:3306-&gt;3306/tcp   port-mariadb</span><br><span class="line">ce4e5c5cee70        mariadb             &quot;docker-entrypoint.sh&quot;   43 minutes ago      Up 26 minutes       3306/tcp                 test-mariadb</span><br></pre></td></tr></table></figure></p><p>至此，就可以通过宿主机本地的Sql客户端工具，配置127.0.0.1的3305端口进行访问了。<br>参考：<a href="https://mariadb.com/kb/en/the-mariadb-library/installing-and-using-mariadb-via-docker/" target="_blank" rel="noopener">https://mariadb.com/kb/en/the-mariadb-library/installing-and-using-mariadb-via-docker/</a></p><h3 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h3><p>附上自己写的docker下启动服务的脚本，每次启动docker后手动启动多麻烦<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># start services</span><br><span class="line">docker start test-redis</span><br><span class="line">docker start port-redis</span><br><span class="line">docker start test-mariadb</span><br><span class="line">docker start port-mariadb</span><br><span class="line">#end start</span><br></pre></td></tr></table></figure></p><hr><p>简单记录，有待深入挖坑！欢迎留言交流！</p>]]></content>
    
    <summary type="html">
    
      简单使用Docker下安装Mariadb服务，基于Boot2Docker在windows下实现
    
    </summary>
    
      <category term="技术" scheme="http://www.icnws.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Docker" scheme="http://www.icnws.com/tags/Docker/"/>
    
      <category term="Mariadb" scheme="http://www.icnws.com/tags/Mariadb/"/>
    
  </entry>
  
  <entry>
    <title>在docker中安装Redis</title>
    <link href="http://www.icnws.com/2017/147-redis-in-docker/"/>
    <id>http://www.icnws.com/2017/147-redis-in-docker/</id>
    <published>2017-09-05T11:31:30.000Z</published>
    <updated>2018-03-15T06:27:28.449Z</updated>
    
    <content type="html"><![CDATA[<p>简单使用Docker下安装Redis服务，基于Boot2Docker在windows下实现</p><h3 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h3><p>当前环境是Windows 7，所以采用Docker的Windows安装版——Boot2Docker，官网如下：</p><p><a href="http://boot2docker.io/" target="_blank" rel="noopener">http://boot2docker.io/</a></p><p>下载地址(Github)如下：</p><p><a href="https://github.com/boot2docker/windows-installer/releases/download/v1.8.0/docker-install.exe" target="_blank" rel="noopener">https://github.com/boot2docker/windows-installer/releases/download/v1.8.0/docker-install.exe</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>一路Next，全选(如果已经安装了Git客户端，这里就不用选择最后一项MSYS-git Unix tools了)、安装驱动，安装完成后会在桌面出现一个virtualBox的标，一个Docker的标，重启即可</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>后双击Docker的图标，发现用sublimeText打开了，实际上是一个.sh文件,只好在git的命令行界面来执行，<code>./start.sh</code> 执行后会显示执行boot2docker的一系列初始化动作，生成密钥，配置，启动VM，分配IP等动作，执行完成后会显示“You can use ‘docker‘ …’’”的字样。这时候，我们在下面键入docker命令，会提示docker的相关命令提示，至此，docker的基本准备工作已经完成，打开VirtualBox会看到一个boot2docker的虚拟机在运行</p><h3 id="下载Redis镜像"><a href="#下载Redis镜像" class="headerlink" title="下载Redis镜像"></a>下载Redis镜像</h3><p>用<code>docker images</code>查看当前所拥有的docker镜像</p><p>用<code>docker search keywords</code>搜索通过关键词指定的镜像</p><p>用<code>docker ps -a</code>查看当前运行的服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">436284456b5a        redis               &quot;docker-entrypoint.sh&quot;   45 minutes ago      Up 45 minutes       6379/tcp                 test-redis</span><br></pre></td></tr></table></figure><p>用<code>docker pull redis</code>下载最新的redis镜像</p><p>下载镜像会慢一些，需要等待，完成之后，通过<code>docker images</code>命令就可以看到了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">redis               latest              b77605993f64        6 weeks ago         105.9 MB</span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name test-redis redis</span><br></pre></td></tr></table></figure><p>docker命令 run 用–name指定容器的别名，redis是指容器的名称</p><h4 id="端口映射1："><a href="#端口映射1：" class="headerlink" title="端口映射1："></a>端口映射1：</h4><p>docker 和虚拟机映射</p><p>将虚拟机的6378端口和docker的6379端口映射，port-redis是名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 6378:6379 --name port-redis redis</span><br></pre></td></tr></table></figure><h4 id="端口映射2："><a href="#端口映射2：" class="headerlink" title="端口映射2："></a>端口映射2：</h4><p>虚拟机和本机映射</p><p>打开VirtualBox找到boot2docker的虚拟机，打开设置、网络，找到【端口转发】，添加一条规则，宿主机6378和虚拟机的6378映射，如下</p><p><img src="/uploads/2017/docker-vertual-port-bind.jpg" alt=""></p><h4 id="启动服务："><a href="#启动服务：" class="headerlink" title="启动服务："></a>启动服务：</h4><p>这里需要启动两个服务，一个是redis本身的服务——test-redis，一个是docker和虚拟机映射服务——port-redis,启动方式如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker start test-redis</span><br><span class="line"></span><br><span class="line">docker start port-redis</span><br></pre></td></tr></table></figure></p><p>通过<code>docker ps -a</code>可以看到服务已经运行了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">e00ff120ecb1        redis               &quot;docker-entrypoint.sh&quot;   16 hours ago        Up 44 seconds       0.0.0.0:6378-&gt;6379/tcp   port-redis</span><br><span class="line">436284456b5a        redis               &quot;docker-entrypoint.sh&quot;   16 hours ago        Up About a minute   6379/tcp                 test-redis</span><br></pre></td></tr></table></figure></p><p>至此，就可以通过宿主机本地的RDM（Redis Desktop Manager）配置127.0.0.1的6378端口进行访问了。</p><hr><p>简单记录，有待深入挖坑！欢迎留言交流！</p>]]></content>
    
    <summary type="html">
    
      简单使用Docker下安装Redis服务，基于Boot2Docker在windows下实现
    
    </summary>
    
      <category term="技术" scheme="http://www.icnws.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Redis" scheme="http://www.icnws.com/tags/Redis/"/>
    
      <category term="Docker" scheme="http://www.icnws.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot整合Reids</title>
    <link href="http://www.icnws.com/2017/146-spring-boot-with-redis/"/>
    <id>http://www.icnws.com/2017/146-spring-boot-with-redis/</id>
    <published>2017-08-31T04:31:30.000Z</published>
    <updated>2018-03-15T06:27:28.449Z</updated>
    
    <content type="html"><![CDATA[<p>终于还是用了Spring Boot，主要跑定时任务。上一次写的那个定时任务就是要用的。这次主要是在定时任务中更新缓存（Redis）数据。</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>当前版本是SpringBoot 1.5.4.RELEASE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Redis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>这里只需要添加这一个依赖就好了，点进去可以看到相关依赖的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></p><h3 id="调整配置"><a href="#调整配置" class="headerlink" title="调整配置"></a>调整配置</h3><p> application.properties增加参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># REDIS (RedisProperties)</span><br><span class="line"># Redis数据库索引（默认为0）</span><br><span class="line">spring.redis.database=0</span><br><span class="line"># Redis服务器地址</span><br><span class="line">spring.redis.host=localhost</span><br><span class="line"># Redis服务器连接端口</span><br><span class="line">spring.redis.port=6379</span><br><span class="line"># Redis服务器连接密码（默认为空）</span><br><span class="line">spring.redis.password=m7ua80gbm7cdm</span><br><span class="line"># 连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-active=10</span><br><span class="line"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-wait=10000</span><br><span class="line"># 连接池中的最大空闲连接</span><br><span class="line">spring.redis.pool.max-idle=200</span><br><span class="line"># 连接池中的最小空闲连接</span><br><span class="line">spring.redis.pool.min-idle=3</span><br><span class="line"># 连接超时时间（毫秒）</span><br><span class="line">spring.redis.timeout=6000</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private StringRedisTemplate stringRedisTemplate;</span><br></pre></td></tr></table></figure><p>然后通过这个类操作Redis，通过阅读源码我们发现，该类是RedisTemplate的子类，具有以下数据操作对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   // cache singleton objects (where possible)</span><br><span class="line">private ValueOperations&lt;K, V&gt; valueOps;//操作String类型的键值</span><br><span class="line">private ListOperations&lt;K, V&gt; listOps;//操作List集合类型的键值</span><br><span class="line">private SetOperations&lt;K, V&gt; setOps;//操作Set集合类型的键值</span><br><span class="line">private ZSetOperations&lt;K, V&gt; zSetOps;//操作有序Set集合类型的键值</span><br><span class="line">private GeoOperations&lt;K, V&gt; geoOps;//操作GEO类型的键值</span><br><span class="line">private HyperLogLogOperations&lt;K, V&gt; hllOps;//这个没有关注</span><br></pre></td></tr></table></figure></p><p>比如<br>操作String类型的键值可以：stringRedisTemplate.opsForValue().set(key,value);<br>操作Zset集合类型的键值可以：stringRedisTemplate.opsForZSet().add(key,value,double);</p><p>这里需要注意，不要使用import org.springframework.data.redis.core.RedisTemplate;这个类,虽然上面的StringRedisTemplate是其子类，但是它操作的redis数据会产生一些额外的二进制数值，如果其他项目读取该数据会略有不便。</p><hr><p>简单记录，有待深入挖坑！欢迎留言交流！</p>]]></content>
    
    <summary type="html">
    
      终于还是用了Spring Boot，主要跑定时任务。上一次写的那个定时任务就是要用的。这次主要是在定时任务中更新缓存（Redis）数据
    
    </summary>
    
      <category term="技术" scheme="http://www.icnws.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring Boot" scheme="http://www.icnws.com/tags/Spring-Boot/"/>
    
      <category term="Redis" scheme="http://www.icnws.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot整合Quartz实现定时任务表配置</title>
    <link href="http://www.icnws.com/2017/145-spring-boot-quartz-editable/"/>
    <id>http://www.icnws.com/2017/145-spring-boot-quartz-editable/</id>
    <published>2017-08-26T02:31:30.000Z</published>
    <updated>2018-03-15T06:27:28.449Z</updated>
    
    <content type="html"><![CDATA[<p>​    最近有个小项目要做，spring mvc下的task设置一直不太灵活，因此在Spring Boot上想做到灵活的管理定时任务。需求就是，当项目启动的时候，如果有定时任务则加载进来，生成scheduler，通过后台表配置可以随时更新定时任务状态（启动、更改、删除）。</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- spring&apos;s support for quartz --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--quartz--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;quartz&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>一个是Spring框架的支持，一个是Quartz的依赖，有的博客会加上quartz-jobs，在当前示例中没有用到，这里不做添加。</p><h3 id="调整配置"><a href="#调整配置" class="headerlink" title="调整配置"></a>调整配置</h3><ul><li><p>application.properties增加参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#quartz enabled 设置在当前项目是否运行quartz定时任务</span><br><span class="line">quartz.enabled=true</span><br></pre></td></tr></table></figure></li><li><p>增加quartz配置文件quartz.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># thread-pool</span><br><span class="line">org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool</span><br><span class="line">org.quartz.threadPool.threadCount=2</span><br><span class="line"># job-store</span><br><span class="line">org.quartz.jobStore.class=org.quartz.simpl.RAMJobStore</span><br></pre></td></tr></table></figure><p>这些参数可以不设置，有一些默认值，threadCount的默认值是10，spring mvc下定时任务的默认值是1，所以如果某个定时任务卡住了，肯会影响其后的多个定时任务的执行。</p></li></ul><h3 id="任务表配置"><a href="#任务表配置" class="headerlink" title="任务表配置"></a>任务表配置</h3><ul><li><p>Entity</p><p>实体类，这里是JobConfig，这里没有做过多的设计，只是实现了cron类型的定时任务及任务状态，fullEntity是执行任务的类全名，如我们用的com.example.demo.jobs.MyJob</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line">import javax.persistence.Entity;</span><br><span class="line">import javax.persistence.GeneratedValue;</span><br><span class="line">import javax.persistence.GenerationType;</span><br><span class="line">import javax.persistence.Id;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Administrator on 2017/8/25.</span><br><span class="line"> */</span><br><span class="line">@Entity</span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class JobConfig &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue(strategy = GenerationType.AUTO)</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String fullEntity;</span><br><span class="line">    private String groupName;</span><br><span class="line">    private String cronTime;</span><br><span class="line">    private Integer status;</span><br><span class="line">    private Date createAt;</span><br><span class="line">    private Date updateAt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码没有set/get是因为使用了lombok，@Data注解实现set/get/toString等工作</p></li><li><p>Repository</p><p>这里主要是定义了一个根据定时任务状态获取对应的定时任务的方法，JobConfigRepository</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import com.example.demo.dto.JobConfig;</span><br><span class="line">import org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Administrator on 2017/8/25.</span><br><span class="line"> */</span><br><span class="line">public interface JobConfigRepository extends JpaRepository&lt;JobConfig, Integer&gt; &#123;</span><br><span class="line">    List&lt;JobConfig&gt; findAllByStatus(int status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Service</p><p>调用Repository的方法，提供查询，JobConfigService</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import com.example.demo.dto.JobConfig;</span><br><span class="line">import com.example.demo.repositories.JobConfigRepository;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Administrator on 2017/8/25.</span><br><span class="line"> */</span><br><span class="line">@Service</span><br><span class="line">public class JobConfigService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private JobConfigRepository jobConfigRepository;</span><br><span class="line"></span><br><span class="line">    public List&lt;JobConfig&gt; findAllByStatus(Integer status) &#123;</span><br><span class="line">        return jobConfigRepository.findAllByStatus(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加自动注入支持"><a href="#添加自动注入支持" class="headerlink" title="添加自动注入支持"></a>添加自动注入支持</h3><p>源于<a href="https://gist.github.com/jelies/5085593的解决方案，解决的问题就是在org.quartz.Job的子类里无法直接使用Service等依赖，具体如下：" target="_blank" rel="noopener">https://gist.github.com/jelies/5085593的解决方案，解决的问题就是在org.quartz.Job的子类里无法直接使用Service等依赖，具体如下：</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import org.quartz.spi.TriggerFiredBundle;</span><br><span class="line">import org.springframework.beans.BeansException;</span><br><span class="line">import org.springframework.beans.factory.config.AutowireCapableBeanFactory;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.ApplicationContextAware;</span><br><span class="line">import org.springframework.scheduling.quartz.SpringBeanJobFactory;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Adds auto-wiring support to quartz jobs.</span><br><span class="line"> * @see &quot;https://gist.github.com/jelies/5085593&quot;</span><br><span class="line"> */</span><br><span class="line">public final class AutoWiringSpringBeanJobFactory extends SpringBeanJobFactory </span><br><span class="line">                implements ApplicationContextAware &#123;</span><br><span class="line"></span><br><span class="line">    private transient AutowireCapableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    public void setApplicationContext(ApplicationContext applicationContext) </span><br><span class="line">        throws BeansException &#123;</span><br><span class="line">        beanFactory = applicationContext.getAutowireCapableBeanFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Object createJobInstance(final TriggerFiredBundle bundle) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        final Object job = super.createJobInstance(bundle);</span><br><span class="line">        beanFactory.autowireBean(job);</span><br><span class="line">        return job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scheduler工具类"><a href="#Scheduler工具类" class="headerlink" title="Scheduler工具类"></a>Scheduler工具类</h3><p>实现Scheduler的增删改功能以及JobDetail、CronTrigger的创建，需要注意，这里的数据都是源于JobConfig这个表，name是FullEntity+Id拼接而成的。具体看代码可知：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line">import com.example.demo.config.AutoWiringSpringBeanJobFactory;</span><br><span class="line">import com.example.demo.dto.JobConfig;</span><br><span class="line">import org.quartz.*;</span><br><span class="line">import org.quartz.impl.StdSchedulerFactory;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.core.io.ClassPathResource;</span><br><span class="line">import org.springframework.scheduling.quartz.CronTriggerFactoryBean;</span><br><span class="line">import org.springframework.scheduling.quartz.JobDetailFactoryBean;</span><br><span class="line">import org.springframework.scheduling.quartz.SchedulerFactoryBean;</span><br><span class="line"></span><br><span class="line">import java.text.ParseException;</span><br><span class="line"></span><br><span class="line">public class SchedulerUtil &#123;</span><br><span class="line"></span><br><span class="line">    //定时任务Scheduler的工厂类，Quartz提供</span><br><span class="line">    private static StdSchedulerFactory schedulerFactory = new StdSchedulerFactory();</span><br><span class="line">    //CronTrigger的工厂类</span><br><span class="line">    private static CronTriggerFactoryBean factoryBean = new CronTriggerFactoryBean();</span><br><span class="line">    //JobDetail的工厂类</span><br><span class="line">    private static JobDetailFactoryBean jobDetailFactory = new JobDetailFactoryBean();</span><br><span class="line">    //自动注入Spring Bean的工厂类</span><br><span class="line">    private static AutoWiringSpringBeanJobFactory jobFactory = </span><br><span class="line">    new AutoWiringSpringBeanJobFactory();</span><br><span class="line">    //定时任务Scheduler的工厂类，Spring Framework提供</span><br><span class="line">    private static SchedulerFactoryBean schedulerFactoryBean = new SchedulerFactoryBean();</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        //加载指定路径的配置</span><br><span class="line">        schedulerFactoryBean.setConfigLocation(new ClassPathResource(&quot;quartz.properties&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建定时任务，根据参数，创建对应的定时任务，并使之生效</span><br><span class="line">     * @param config</span><br><span class="line">     * @param context</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static boolean createScheduler(JobConfig config, </span><br><span class="line">                                    ApplicationContext context) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //创建新的定时任务</span><br><span class="line">            return create(config, context);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除旧的定时任务，创建新的定时任务</span><br><span class="line">     * @param oldConfig</span><br><span class="line">     * @param config</span><br><span class="line">     * @param context</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Boolean modifyScheduler(JobConfig oldConfig,JobConfig config, </span><br><span class="line">        ApplicationContext context) &#123;</span><br><span class="line">        if (oldConfig == null || config == null || context == null) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            String oldJobClassStr = oldConfig.getFullEntity();</span><br><span class="line">            String oldName = oldJobClassStr + oldConfig.getId();</span><br><span class="line">            String oldGroupName = oldConfig.getGroupName();</span><br><span class="line">            //1、清除旧的定时任务</span><br><span class="line">            delete(oldName, oldGroupName);</span><br><span class="line">            //2、创建新的定时任务</span><br><span class="line">            return create(config, context);</span><br><span class="line">        &#125; catch (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 提取的删除任务的方法</span><br><span class="line">     * @param oldName</span><br><span class="line">     * @param oldGroupName</span><br><span class="line">     * @return</span><br><span class="line">     * @throws SchedulerException</span><br><span class="line">     */</span><br><span class="line">    private static Boolean delete(String oldName, String oldGroupName)</span><br><span class="line">        throws SchedulerException &#123;</span><br><span class="line">        TriggerKey key = new TriggerKey(oldName, oldGroupName);</span><br><span class="line">        Scheduler oldScheduler = schedulerFactory.getScheduler();</span><br><span class="line">        //根据TriggerKey获取trigger是否存在，如果存在则根据key进行删除操作</span><br><span class="line">        Trigger keyTrigger = oldScheduler.getTrigger(key);</span><br><span class="line">        if (keyTrigger != null) &#123;</span><br><span class="line">            oldScheduler.unscheduleJob(key);</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 提取出的创建定时任务的方法</span><br><span class="line">     * @param config</span><br><span class="line">     * @param context</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static Boolean create(JobConfig config, ApplicationContext context) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //创建新的定时任务</span><br><span class="line">            String jobClassStr = config.getFullEntity();</span><br><span class="line">            Class clazz = Class.forName(jobClassStr);</span><br><span class="line">            String name = jobClassStr + config.getId();</span><br><span class="line">            String groupName = config.getGroupName();</span><br><span class="line">            String description = config.toString();</span><br><span class="line">            String time = config.getCronTime();</span><br><span class="line"></span><br><span class="line">            JobDetail jobDetail = createJobDetail(clazz, name, groupName, description);</span><br><span class="line">            if (jobDetail == null) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            Trigger trigger = createCronTrigger(jobDetail, </span><br><span class="line">                time, name, groupName, description);</span><br><span class="line">            if (trigger == null) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            jobFactory.setApplicationContext(context);</span><br><span class="line"></span><br><span class="line">            schedulerFactoryBean.setJobFactory(jobFactory);</span><br><span class="line">            schedulerFactoryBean.setJobDetails(jobDetail);</span><br><span class="line">            schedulerFactoryBean.setTriggers(trigger);</span><br><span class="line">            schedulerFactoryBean.afterPropertiesSet();</span><br><span class="line">            Scheduler scheduler = schedulerFactoryBean.getScheduler();</span><br><span class="line">            if (!scheduler.isShutdown()) &#123;</span><br><span class="line">                scheduler.start();</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据指定的参数，创建JobDetail</span><br><span class="line">     * @param clazz</span><br><span class="line">     * @param name</span><br><span class="line">     * @param groupName</span><br><span class="line">     * @param description</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static JobDetail createJobDetail(Class clazz, String name, </span><br><span class="line">                                String groupName, String description) &#123;</span><br><span class="line">        jobDetailFactory.setJobClass(clazz);</span><br><span class="line">        jobDetailFactory.setName(name);</span><br><span class="line">        jobDetailFactory.setGroup(groupName);</span><br><span class="line">        jobDetailFactory.setDescription(description);</span><br><span class="line">        jobDetailFactory.setDurability(true);</span><br><span class="line">        jobDetailFactory.afterPropertiesSet();</span><br><span class="line">        return jobDetailFactory.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据参数，创建对应的CronTrigger对象</span><br><span class="line">     *</span><br><span class="line">     * @param job</span><br><span class="line">     * @param time</span><br><span class="line">     * @param name</span><br><span class="line">     * @param groupName</span><br><span class="line">     * @param description</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static CronTrigger createCronTrigger(JobDetail job, String time, </span><br><span class="line">            String name, String groupName, String description) &#123;</span><br><span class="line">        factoryBean.setName(name);</span><br><span class="line">        factoryBean.setJobDetail(job);</span><br><span class="line">        factoryBean.setCronExpression(time);</span><br><span class="line">        factoryBean.setDescription(description);</span><br><span class="line">        factoryBean.setGroup(groupName);</span><br><span class="line">        try &#123;</span><br><span class="line">            factoryBean.afterPropertiesSet();</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return factoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scheduler初始化配置"><a href="#Scheduler初始化配置" class="headerlink" title="Scheduler初始化配置"></a>Scheduler初始化配置</h3><p>通过Spring Boot的@Configuration及@ConditionalOnExpression(“‘${quartz.enabled}’==’true’”)实现初始化时是否加载项目的定时任务——SchedulerConfig，这里的参数quartz.enabled的值即是我们上面在配置文件里配置的。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo.config;</span><br><span class="line"></span><br><span class="line">import com.example.demo.dto.JobConfig;</span><br><span class="line">import com.example.demo.service.JobConfigService;</span><br><span class="line">import com.example.demo.util.SchedulerUtil;</span><br><span class="line">import org.quartz.impl.StdSchedulerFactory;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@ConditionalOnExpression(&quot;&apos;$&#123;quartz.enabled&#125;&apos;==&apos;true&apos;&quot;)</span><br><span class="line">public class SchedulerConfig &#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line">    @Autowired</span><br><span class="line">    private ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private JobConfigService jobConfigService;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public StdSchedulerFactory stdSchedulerFactory() &#123;</span><br><span class="line">        StdSchedulerFactory stdSchedulerFactory = new StdSchedulerFactory();</span><br><span class="line">        //获取JobConfig集合</span><br><span class="line">        List&lt;JobConfig&gt; configs = jobConfigService.findAllByStatus(1);</span><br><span class="line">        logger.debug(&quot;Setting the Scheduler up&quot;);</span><br><span class="line">        for (JobConfig config : configs) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Boolean flag = SchedulerUtil.createScheduler(</span><br><span class="line">                        config, applicationContext);</span><br><span class="line">                System.out.println(&quot;执行结果：&quot; + (flag == true ? &quot;成功&quot; : &quot;失败&quot;));</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return stdSchedulerFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Job实现"><a href="#Job实现" class="headerlink" title="Job实现"></a>Job实现</h3><p>这里定义了一个简单的Job继承org.quartz.Job,主要是查询当前的定时任务表配置数据，MyJob，具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo.jobs;</span><br><span class="line"></span><br><span class="line">import com.example.demo.dto.JobConfig;</span><br><span class="line">import com.example.demo.service.JobConfigService;</span><br><span class="line">import org.quartz.Job;</span><br><span class="line">import org.quartz.JobExecutionContext;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class MyJob implements Job &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private JobConfigService jobConfigService;</span><br><span class="line"></span><br><span class="line">    public void execute(JobExecutionContext context) &#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println();</span><br><span class="line">        //是哪个定时任务配置在执行，可以看到，因为在前面我们将描述设置为了配置类的toString结果</span><br><span class="line">        System.out.println(context.getJobDetail().getDescription());</span><br><span class="line">        SimpleDateFormat f = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        System.out.println(this.toString() + &quot;:&quot; + f.format(new Date()) + </span><br><span class="line">            &quot;正在执行Job   executing...&quot;);</span><br><span class="line">        List&lt;JobConfig&gt; configs = jobConfigService.findAllByStatus(1);</span><br><span class="line">        for (JobConfig config : configs) &#123;</span><br><span class="line">            System.out.println(config.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库表job-config"><a href="#数据库表job-config" class="headerlink" title="数据库表job_config"></a>数据库表job_config</h3><ul><li>表创建</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `job_config` (</span><br><span class="line">  `id`          INT(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `create_at`   DATETIME         DEFAULT NULL,</span><br><span class="line">  `cron_time`   VARCHAR(255)     DEFAULT NULL,</span><br><span class="line">  `full_entity` VARCHAR(255)     DEFAULT NULL,</span><br><span class="line">  `group_name`  VARCHAR(255)     DEFAULT NULL,</span><br><span class="line">  `name`        VARCHAR(255)     DEFAULT NULL,</span><br><span class="line">  `status`      INT(11)          DEFAULT NULL,</span><br><span class="line">  `update_at`   DATETIME         DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">)</span><br><span class="line">  ENGINE = InnoDB</span><br><span class="line">  AUTO_INCREMENT = 3</span><br><span class="line">  DEFAULT CHARSET = utf8;</span><br></pre></td></tr></table></figure><ul><li>表数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*Data for the table `job_config` */</span><br><span class="line"></span><br><span class="line">INSERT INTO `job_config` (`id`, `create_at`, `cron_time`, `full_entity`, `group_name`, `name`, `status`, `update_at`)</span><br><span class="line">VALUES (1, &apos;2017-08-25 21:03:35&apos;, &apos;0/8 * *  * * ?&apos;, &apos;com.example.demo.jobs.MyJob&apos;, &apos;test&apos;, &apos;My test&apos;, 1, NULL),</span><br><span class="line">  (2, &apos;2017-08-25 21:12:02&apos;, &apos;0/23 * * * * ?&apos;, &apos;com.example.demo.jobs.MyJob&apos;, &apos;test&apos;, &apos;My Job&apos;, 1, NULL);</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">JobConfig(id=1, name=My test, fullEntity=com.example.demo.jobs.MyJob, groupName=test, cronTime=0/8 * *  * * ?, status=1, createAt=2017-08-25 21:03:35.0, updateAt=null)</span><br><span class="line">com.example.demo.jobs.MyJob@7602fe69:2017-08-26 10:43:16正在执行Job   executing...</span><br><span class="line">Hibernate: select jobconfig0_.id as id1_1_, jobconfig0_.create_at as create_a2_1_, jobconfig0_.cron_time as cron_tim3_1_, jobconfig0_.full_entity as full_ent4_1_, jobconfig0_.group_name as group_na5_1_, jobconfig0_.name as name6_1_, jobconfig0_.status as status7_1_, jobconfig0_.update_at as update_a8_1_ from job_config jobconfig0_ where jobconfig0_.status=?</span><br><span class="line">JobConfig(id=1, name=My test, fullEntity=com.example.demo.jobs.MyJob, groupName=test, cronTime=0/8 * *  * * ?, status=1, createAt=2017-08-25 21:03:35.0, updateAt=null)</span><br><span class="line">JobConfig(id=2, name=My Job, fullEntity=com.example.demo.jobs.MyJob, groupName=test, cronTime=0/23 * * * * ?, status=1, createAt=2017-08-25 21:12:02.0, updateAt=null)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JobConfig(id=2, name=My Job, fullEntity=com.example.demo.jobs.MyJob, groupName=test, cronTime=0/23 * * * * ?, status=1, createAt=2017-08-25 21:12:02.0, updateAt=null)</span><br><span class="line">com.example.demo.jobs.MyJob@4a49530:2017-08-26 10:43:23正在执行Job   executing...</span><br><span class="line">Hibernate: select jobconfig0_.id as id1_1_, jobconfig0_.create_at as create_a2_1_, jobconfig0_.cron_time as cron_tim3_1_, jobconfig0_.full_entity as full_ent4_1_, jobconfig0_.group_name as group_na5_1_, jobconfig0_.name as name6_1_, jobconfig0_.status as status7_1_, jobconfig0_.update_at as update_a8_1_ from job_config jobconfig0_ where jobconfig0_.status=?</span><br><span class="line">JobConfig(id=1, name=My test, fullEntity=com.example.demo.jobs.MyJob, groupName=test, cronTime=0/8 * *  * * ?, status=1, createAt=2017-08-25 21:03:35.0, updateAt=null)</span><br><span class="line">JobConfig(id=2, name=My Job, fullEntity=com.example.demo.jobs.MyJob, groupName=test, cronTime=0/23 * * * * ?, status=1, createAt=2017-08-25 21:12:02.0, updateAt=null)</span><br></pre></td></tr></table></figure><p>到这里，Spring Boot与quartz的整合已经完成了，可以通过配置表job_config以及配置quartz.enabled参数来灵活使用定时任务了！</p><p>后续还会继续实践、丰富这个示例，如果上文有什么问题，欢迎留言指正，谢谢！</p><p>源码：<a href="https://github.com/icnws/spring-data-jpa-demo" target="_blank" rel="noopener">https://github.com/icnws/spring-data-jpa-demo</a></p><hr><p>定时任务的路还有很长，想更灵活？可能需要elastic-job等框架吧！欢迎留言交流！</p>]]></content>
    
    <summary type="html">
    
      结合Spring Boot，使用Quartz实现定时任务单表配置，可动态管理定时任务状态
    
    </summary>
    
      <category term="技术" scheme="http://www.icnws.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring Boot" scheme="http://www.icnws.com/tags/Spring-Boot/"/>
    
      <category term="Quartz" scheme="http://www.icnws.com/tags/Quartz/"/>
    
  </entry>
  
</feed>
